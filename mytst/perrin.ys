# Initialize registers
irmovq $3, %rax     # Initialize %rax to 3
irmovq $0, %rcx     # Initialize %rcx to 0
irmovq $2, %rdx     # Initialize %rdx to 2
irmovq $0, %rbx     # Initialize %rbx to 0
irmovq $0, %rsp     # Initialize %rsp to 0
irmovq $0, %rbp     # Initialize %rbp to 0
irmovq $0, %rsi     # Initialize %rsi to 0
irmovq $0, %rdi     # Initialize %rdi to 0
irmovq $0, %r8      # Initialize %r8 to 0
irmovq $0, %r9      # Initialize %r9 to 0
irmovq $0, %r10     # Initialize %r10 to 0
irmovq $0, %r11     # Initialize %r11 to 0
irmovq $0, %r12     # Initialize %r12 to 0
irmovq $0, %r13     # Initialize %r13 to 0
irmovq $0, %r14     # Initialize %r14 to 0

# Calculate the next 12 Perrin numbers
addq %rax, %rbx
addq %rcx, %rbx     # Calculate P(3)
addq %rcx, %rsp
addq %rdx, %rsp     # Calculate P(4)
addq %rdx, %rbp
addq %rbx, %rbp     # Calculate P(5)
addq %rbx, %rsi
addq %rsp, %rsi     # Calculate P(6)
addq %rsp, %rdi
addq %rbp, %rdi     # Calculate P(7)
addq %rbp, %r8
addq %rsi, %r8      # Calculate P(8)
addq %rsi, %r9
addq %rdi, %r9      # Calculate P(9)
addq %rdi, %r10
addq %r8, %r10      # Calculate P(10)
addq %r8, %r11
addq %r9, %r11      # Calculate P(11)
addq %r9, %r12
addq %r10, %r12     # Calculate P(12)
addq %r10, %r13 
addq %r11, %r13     # Calculate P(13)
addq %r11, %r14
addq %r12, %r14     # Calculate P(14)

# Reverse the registers
xorq %rax, %r14           
xorq %r14, %rax          
xorq %rax, %r14     # swap rax, r14

xorq %rcx, %r13
xorq %r13, %rcx
xorq %rcx, %r13     # swap rcx, r13

xorq %rdx, %r12
xorq %r12, %rdx 
xorq %rdx, %r12     # swap rdx, r12

xorq %rbx, %r11
xorq %r11, %rbx
xorq %rbx, %r11     # swap rbx, r11
                    
xorq %rsp, %r10
xorq %r10, %rsp
xorq %rsp, %r10     # swap rsp, r10

xorq %rbp, %r9
xorq %r9, %rbp
xorq %rbp, %r9      # swap rbp, r9

xorq %rsi, %r8
xorq %r8, %rsi
xorq %rsi, %r8      # swap rsi, r8

# End of program
halt
